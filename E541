// E514
// Raju和Meena喜歡玩大理石(marble)。他們有很多上寫有數字的大理石。剛開始，Raju會按照書寫在上面的數字以升序依次放置大理石。
   然後，Meena會要求Raju找到指定號碼的第一塊大理石。如果Raju成功，Raju將獲得一分，如果Raju失敗，Meena將獲得一分。
   經過多次的詢問，遊戲結束，獲得最高分的玩家獲勝。
// 輸入有多組測資。測資數量少於65。每組測資開頭有兩個整數N和Q。N是大理石的數量，Q是Meena的查詢數量。
   如果N = Q = 0代表輸入結束。接下來N行包含N個大理石上寫的數字。這些大理石編號不會以任何特定順序出現。
   接下來的Q行將進行Q次查詢。所有數字皆 <= 10000，並且不為負數。
// 對於每組測資，輸出測資編號。對於每個查詢，如果在位置y上找到第一個編號為x的大理石
   輸出"x found at y" 如果沒有編號為x的大理石，輸出"x not found"
// Ex. 4 1      ----->  CASE# 1:
       2                5 found at 4
       3                CASE# 2:
       5                2 not found
       1                3 found at 3
       5
       5 2
       1
       3
       3  
       3
       1
       2
       3
       0 0
--------------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
#define ALL(x) x.begin(), x.end()

int main() {
    int kase = 0;
    int N, Q;
    while (cin >> N >> Q && N != 0) {
        printf("CASE# %d:\n", ++kase);
        //讀取大理石並排序
        vector<int> v(N);
        for (int i = 0; i < N; i++) cin >> v[i];
        sort(ALL(v));
        //回答Q個問題
        while (Q--) {
            int f;
            cin >> f;
            //lower_bound 輸出為指標 減去v.begin() 位址轉換為數值
            int p = lower_bound(ALL(v), f) - v.begin();
            if (p < N && v[p] == f) //輸出一行
                printf("%d found at %d\n", f, (p + 1));
            else
                printf("%d not found\n", f);
        }
    }
}
