// d217
// Hangman Judge是一個猜英文單字的小遊戲（在電子字典中常會看到），遊戲規則如下：
   答案單字寫在紙上（每個字元一張紙），並且被蓋起來，玩家每次猜一個英文字元（letter）。
   如果這個英文字元猜中（在答案的英文單字中有出現），被猜中的字元就被翻開。例如：答案是book，如果你猜o，book中的兩個o就會被視為已猜中。
   如果這個英文字元未出現在答案的單字中，就會在hangman的圖中多加一劃。要完成hangman圖共需7劃，如下圖。注意：同一個猜錯的字元只能再圖上畫一劃，
   例如：答案是book，第一次你猜a（未猜中）會在圖上畫一劃，但第二次以後再猜a並不會再多畫。
   如果在hangman圖完成之前，玩家已猜中所有答案中的字元，則玩家贏（win）。
   如果玩家尚未猜中所有答案中的字元而hangman圖完成了，，則玩家輸（lose）。
   如果玩家在還沒輸贏的情況之下就不玩了，那我們說玩家膽小放棄了（chicken out）.
-------------------------------------------------------------------
#include<iostream>
#include<string>
#include<set>
using namespace std;
#define ALL(x) x.begin(), x.end()

int main() {
    int round;
    while (cin >> round && round != -1) {
        //讀題目、猜測 設置前置變數
        string q, a;
        int lc = 7;        //敗北計數
        cin >> q >> a;
        //前處理
        printf("Round %d\n", round);
        set<char> uc(ALL(q));    //刪除題目重複英文字元
        set<char> aa;            //儲存已經猜過的字元
        //開始處理劊子手遊戲的判斷
        for (int i = 0; i < a.size(); i++) {
            //確認玩家猜測字元是否已經猜過
            if (aa.count(a[i]))    continue;    //猜過：跳過本次迴圈
            aa.insert(a[i]);                //未猜過：加入猜過字元變數
            //判斷有無猜到題目的字元
            if (uc.count(a[i]))    uc.erase(a[i]);    //有猜到
            else                lc--;            //未猜到
            //是否達成結束條件(勝利or敗北)
            if (uc.empty() || !lc)  break;
        }
        //印出判斷結果
        if (uc.empty())     cout << "You win.\n";
        else if (!lc)    cout << "You lose.\n";
        else             cout << "You chickened out.\n";
    }
}
