// B123
// 在一個 M*N 的區域內，散落了許多不同的障礙物，我們想知道的是，在這個區域內，最大的空地矩形面積?
   倘若我們用0代表這個子區域已被障礙物覆蓋，1代表這個子區域仍為空地，假設每一個0與1代表的子區域面積為1
// 輸入檔第一行有兩個整數，依序為M 和N, M≦200, N≦200；接下來的M行中，每一行有N 個0 或1 的數字。這N個數字彼此間用一個空白隔開。
// Ex. 4 5
       0 0 1 1 0
       0 1 1 1 1
       0 1 1 1 1
       0 0 1 0 0
    -> 8
---------------------------------------------------------------
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int M, N;
    while (cin >> M >> N) {
        int arr[201][201];  // 題目最大 M & N 是200單位
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                cin >> arr[i][j];
                // 找出空地的寬: 0111011 > 0123012
                if (arr[i][j] && j > 0)
                    arr[i][j] = arr[i][j - 1] + 1;
            }
        }
        // 找最大矩形
        int A = 0;
        for (int i = 0; i < M; i++) {        // 0111   0123
            for (int j = 0; j < N; j++) {    // 0011 > 0012
                int w = 201;  // 最大寬200單位，大於200即為最大值
                for (int h = 0; h <= i && arr[i - h][j]; h++) {
                    w = min(w, arr[i - h][j]);
                    A = max(A, w * (h + 1));
                }
            }
        }
        cout << A << "\n";
    }
    return 0;
}
