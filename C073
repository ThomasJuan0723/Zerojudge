// C073
// 一開始在一平坦的桌面上有n塊積木（編號從0到n-1）0號積木放在0號位置上，1號積木放在1號位置上，依此類推
   機器手臂有以下幾種合法搬積木的方式（a和b是積木的編號）：
   move a onto b
   在將a搬到b上之前，先將a和b上的積木放回原來的位置（例如：1就放回1的最開始位罝）
   move a over b
   在將a搬到b所在的那堆積木之上之前，先將a上的積木放回原來的位罝（b所在的那堆積木不動）
   pile a onto b
   將a本身和其上的積木一起放到b上，在搬之前b上方的積木放回原位
   pile a over b
   將a本身和其上的積木一起搬到到b所在的那堆積木之上
   quit
   動作結束
   前四個動作中若a=b，或者a, b在同一堆積木中，那麼這樣的動作算是不合法的。所有不合法的動作應該被忽略，也就是對各積木均無改變。
-------------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int n; 
vector<int> v[25];//0<n<25


void find_block(int b, int& p, int& h);
void clear_above(int p, int h);
void pile_over(int p1, int h, int p2);
void show();

int main() {
    string s1, s2;
    int a, b, pa, pb, ha, hb;
    while (cin >> n) {
        
        for (int i = 0; i < n; i++) {
            v[i].clear();
            v[i].push_back(i);
        }
        
        while (cin >> s1 && s1 != "quit") {
            cin >> a >> s2 >> b;
            find_block(a, pa, ha);
            find_block(b, pb, hb);
            if (pa != pb) {
                if (s1 == "move") clear_above(pa, ha);
                if (s2 == "onto") clear_above(pb, hb);
                pile_over(pa, ha, pb);
            }

        }
        show();
    }
    return 0;
}

void find_block(int b, int& p, int& h) {
    for (p = 0; p < n; p++) {
        for (h = 0; h < v[p].size(); h++) {
            if (v[p][h] == b) return;
        }
    }
}

void clear_above(int p, int h) {
    for (int i = v[p].size() - 1; i > h; i--) {
        int b = v[p][i];
        v[b].push_back(b);
        v[p].pop_back();
    }
    return;
}

void pile_over(int p1, int h, int p2) {
    v[p2].insert(v[p2].end(), v[p1].begin() + h, v[p1].end());
    v[p1].erase(v[p1].begin() + h, v[p1].end());
    return;
}

void show() {
    for (int i = 0; i < n; i++) {
        
        cout << i << ":";
        for (int j = 0; j < v[i].size(); j++) {
            cout << " " << v[i][j];
        }
        cout << "\n";
    }
    return;
}
